/**
 * the producer function is used to send  jobs, (also known as messages, in RabbitMQ lingo) to the queue,
 * these messages are "dummy" user data generated by faker.js using the generateRandomUser() function
 * a sample user data object structure is declared below in the UserDataInterface
 * the producer function is called in the bull-producer.ts file, this cause the job to be added to the queue, on the other side, in the bull-consumer.ts file, the job is received and processed.
 */

import { jobOptions, messagingQueue } from "./bull-config";
import { faker } from '@faker-js/faker';


//declare the user data structure
interface UserDataInterface {
    userId: string,
    username: string,
    email: string,
    avatar: string,
    password: string,
    firstName: string,
    lastName: string,
    registeredAt: Date,
}

function generateRandomUser(): UserDataInterface {
    return {
        userId: faker.datatype.uuid(),
        username: faker.internet.userName(),
        email: faker.internet.email(),
        avatar: faker.internet.avatar(),
        password: faker.internet.password(),
        firstName: faker.name.firstName(),
        lastName: faker.name.lastName(),
        registeredAt: faker.date.past()
    }
}
//generate some data 
const fakeDataOne =
    (async function producer() {
        //generate the random data 
        const data1 = generateRandomUser();
        const data2 = generateRandomUser();
        const data3 = generateRandomUser();

        //add the data to the queue
        console.log("in producer");
        const jobName = String(process.env.JOB_NAME)
        await messagingQueue.add(jobName, data1,)
        await messagingQueue.add(jobName, data2,)
        await messagingQueue.add(jobName, data3,)

        console.log("job added to queue");
    })()

messagingQueue.on("waiting", (job) => {
    console.log("waiting", job.data.email);
})